{% extends 'base_admin.html.twig' %}
{% block title %}Calendrier{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

    <style>
        .ui-autocomplete {
            z-index: 9999;
        }
    </style>
{% endblock %}

{% block body %}
    {% include('admin/sidebar.html.twig') %}
    <div class="page-wrapper">
        <div class="row row-cards">
            <div class="page-body">
                <div class="container-xl">
                    <div class="row row-cards">
                        <div class="col-lg-12">
                            <div class="card">
                                <div id="calendar"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.4/jquery.min.js" integrity="sha512-pumBsjNRGGqkPzKHndZMaAG+bir374sORyzM3uulLV14lN5LyykqNk8eEeUlUkB3U0M4FApyaHraT65ihJhDpQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.4/index.global.min.js" integrity="sha256-z82jYOK/utiAteR0z6FjIOQmdWzvxqXJ6wsXbGJkBwY=" crossorigin="anonymous"></script>

    <script>
        $(document).ready(function () {
            let calendarElt = document.querySelector("#calendar");
            let isPopupOpen = false; // Variable pour suivre l'état de la popup

            let calendar = new FullCalendar.Calendar(calendarElt, {
                initialView: 'timeGridDay',
                locale: 'fr',
                timeZone: 'Europe/Paris',
                headerToolbar: {
                    start: 'prev,next today',
                    center: 'title',
                    end: 'dayGridMonth,timeGridWeek,timeGridDay',
                },
                height: 'auto',
                slotDuration: '00:30:00',
                slotLabelInterval: 30,
                slotMinTime: '10:00:00',
                slotMaxTime: '19:00:00',
                eventDisplay: 'block',
                businessHours: {
                    startTime: '10:00',
                    endTime: '19:00',
                    daysOfWeek: [1, 2, 3, 4, 5, 6]
                },
                slotEventOverlap: false,
                visibleRange: {
                    start: '09:00',
                    end: '19:00'
                },

                eventSources: [
                    {
                        url: "{{ path('admin_events_all') }}",
                        method: "POST",
                    },
                ],
                //affichage de block event
                eventContent: function (arg) {
                    let eventTitle = arg.event.title;
                    let eventContent = document.createElement('div');
                    eventContent.textContent = eventTitle;
                    return {domNodes: [eventContent]};
                },
                // add event and selectable
                editable: true,
                eventDrop: updateEvent,
                eventClick: deleteEvent, // Ajout de l'événement de suppression
                selectable: "slot",
                selectOverlap: true,
                dateClick: function (info) {
                    const slotStart = info.date;
                    const slotEnd = new Date(slotStart.getTime() + 30 * 60 * 1000); // Ajoute 30 minutes à l'heure de début

                    if (isPopupOpen) {
                        return; // Sortir de la fonction si une popup est déjà ouverte
                    }

                    // Créer le formulaire de sélection du type d'événement
                    let form = document.createElement("form");
                    form.classList.add("p-3");
                    let typeSelect = document.createElement("select");
                    typeSelect.id = "type-select";
                    typeSelect.classList.add("form-select", "mb-3");
                    typeSelect.innerHTML = `
                            <option value="rdv">RDV</option>
                            <option value="off">Congés</option>
                        `;
                    form.appendChild(typeSelect);

                    // Ajouter les champs nom et téléphone
                    let firstnameInput = document.createElement("input");
                    firstnameInput.id = "firstname-input";
                    firstnameInput.name = "firstname";
                    firstnameInput.placeholder = "Nom";
                    firstnameInput.classList.add("form-control", "mb-3");
                    form.appendChild(firstnameInput);
                    let lastnameInput = document.createElement("input");
                    lastnameInput.id = "lastname-input";
                    lastnameInput.name = "lastname";
                    lastnameInput.placeholder = "Prénom";
                    lastnameInput.classList.add("form-control", "mb-3");
                    form.appendChild(lastnameInput);

                    let phoneInput = document.createElement("input");
                    phoneInput.id = "phone-input";
                    phoneInput.name = "phone";
                    phoneInput.placeholder = "Numéro de téléphone";
                    phoneInput.classList.add("form-control", "mb-3");
                    form.appendChild(phoneInput);

                    //
                    $(phoneInput).autocomplete({
                        source: function (request, response) {
                            // Effectuer une requête AJAX pour récupérer les suggestions d'autocomplétion depuis le serveur
                            $.ajax({
                                url: "{{ path('ajax_autocomplete') }}",
                                data: {term: request.term},
                                success: function (data) {
                                    let suggestions = data.map(item => ({
                                        label: item.lname + ' ' + item.fname,
                                        value: item.lname + ' ' + item.fname
                                    }));
                                    response(suggestions);
                                }
                            });
                        },
                        minLength: 2, // Définir le nombre minimum de caractères avant de déclencher l'autocomplétion
                        select: function (event, ui) {
                            // Remplir les champs firstname et lastname avec les valeurs appropriées après la sélection du téléphone
                            const selectedPhone = ui.item.value;
                            const selectedFirstname = "Valeur du prénom correspondante"; // Remplacez par la logique pour récupérer la valeur du prénom correspondante depuis le serveur
                            const selectedLastname = "Valeur du nom de famille correspondante"; // Remplacez par la logique pour récupérer la valeur du nom de famille correspondante depuis le serveur

                            firstnameInput.val(selectedFirstname);
                            lastnameInput.val(selectedLastname);
                        }
                    });
                    //

                    // Ajouter le bouton "Ajouter"
                    let submitButton = document.createElement("input");
                    submitButton.type = "submit";
                    submitButton.value = "Ajouter";
                    submitButton.classList.add("btn", "btn-primary");
                    form.appendChild(submitButton);
                    //cancel btn
                    let cancelButton = document.createElement("button");
                    cancelButton.type = "button";
                    cancelButton.textContent = "Annuler";
                    cancelButton.className = "btn btn-secondary ms-2";
                    form.appendChild(submitButton);
                    form.appendChild(cancelButton);
                    // Créer la pop-up avec le formulaire
                    let popover = new bootstrap.Popover(info.jsEvent.target, {
                        title: "Ajouter un événement",
                        content: form,
                        html: true,
                        placement: "top",
                        trigger: "manual",
                        container: "body",
                    });

                    // Afficher la pop-up
                    popover.show();
                    isPopupOpen = true;
                    // Ajouter un événement pour soumettre le formulaire
                    form.addEventListener("submit", function (event) {
                        event.preventDefault();

                        // Récupérer les valeurs des champs du formulaire
                        let type = typeSelect.value;
                        let lastname = lastnameInput.value;
                        let firstname = lastnameInput.value;
                        let phone = phoneInput.value;

                        // Créer l'événement
                        let eventData = {
                            title: type,
                            start: slotStart,
                            end: slotEnd,
                            allDay: false, // set to false if you want to create a timed event
                            lastname: lastname,
                            firstname: firstname,
                            phone: phone,
                            type: type
                        };
                        // Envoyer les données au serveur avec fetch
                        fetch('{{ path('admin_events_add') }}', {
                            method: 'POST',
                            body: JSON.stringify(eventData),
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Failed to add event');
                                }
                                return response.json();
                            })
                            .then(data => {
                                console.log(data);
                                // Masquer la pop-up
                                popover.hide();
                                isPopupOpen = false;
                                // Recharger la page
                                location.reload();
                            })
                            .catch(error => {
                                console.error(error);
                                // Afficher le message d'erreur dans la pop-up
                                let errorElement = document.createElement('div');
                                errorElement.classList.add('alert', 'alert-danger', 'mt-3');
                                errorElement.textContent = 'Une erreur s\'est produite lors de l\'ajout de l\'événement.';
                                form.appendChild(errorElement);
                            });
                    });

                    // Ajouter un événement pour fermer la pop-up
                    cancelButton.addEventListener("click", function (event) {
                        event.preventDefault();
                        popover.hide();
                        isPopupOpen = false;
                    });
                }

            });


            function updateEvent(event) {
                // update the event with the new dates
                let eventData = {
                    id: event.event.id,
                    start: event.event.start.toISOString(),
                    end: event.event.end ? event.event.end.toISOString() : null
                };
                fetch('{{ path('admin_events_edit') }}', {
                    method: 'POST',
                    body: JSON.stringify(eventData),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to update event');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log(data);
                    })
                    .catch(error => {
                        console.error(error);
                        event.revert();
                    });
            }

            function deleteEvent(info) {
                if (confirm("Êtes-vous sûr de vouloir supprimer cet événement ?")) {
                    fetch('{{ path('admin_events_delete') }}', {
                        method: 'POST',
                        body: JSON.stringify({id: info.event.id}),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to delete event');
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log(data);
                            // Recharger la page
                            location.reload();
                        })
                        .catch(error => {
                            console.error(error);
                        });
                }
            }

            // Function to reload events
            // Fonction pour supprimer un événement
            function reloadEvents() {
                calendar.refetchEvents();
            }

            // Call the reloadEvents function initially to load events when the page loads
            reloadEvents();

            // Set up an interval to call the reloadEvents function every 5 minutes (5 minutes * 60 seconds * 1000 milliseconds)
            setInterval(reloadEvents, 30 * 1000);

            calendar.render();
        });
    </script>

{% endblock %}